// Servi√ßo para integra√ß√£o com OpenAI GPT
export interface GPTMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export interface GPTResponse {
  content: string;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

class GPTService {
  private apiKey: string;
  private baseUrl: string = 'https://api.openai.com/v1';
  private useHuggingFace: boolean = false;

  constructor() {
    // A chave da API ser√° configurada via vari√°vel de ambiente
    this.apiKey = (import.meta as any).env?.VITE_OPENAI_API_KEY || '';
    
    // Se n√£o tem chave OpenAI, usa modo demo
    if (!this.apiKey) {
      this.useHuggingFace = true;
      console.log('üîß Modo Demo ativado - Sem chave de API OpenAI');
    }
  }

  async sendMessage(
    messages: GPTMessage[],
    model: string = 'gpt-3.5-turbo',
    temperature: number = 0.7
  ): Promise<GPTResponse> {
    // Se n√£o tem chave ou excedeu cota, usa modo demo
    if (!this.apiKey || this.useHuggingFace) {
      return this.sendMessageDemo(messages);
    }

    try {
      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify({
          model,
          messages,
          temperature,
          max_tokens: 1000,
          stream: false,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        if (errorData.error?.message?.includes('quota')) {
          // Se excedeu cota, muda para modo demo
          this.useHuggingFace = true;
          return this.sendMessageDemo(messages);
        }
        throw new Error(`OpenAI API error: ${errorData.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();
      
      return {
        content: data.choices[0]?.message?.content || 'No response received',
        usage: data.usage,
      };
    } catch (error) {
      console.error('Error calling OpenAI API:', error);
      // Em caso de erro, usa modo demo
      return this.sendMessageDemo(messages);
    }
  }

  private async sendMessageDemo(messages: GPTMessage[]): Promise<GPTResponse> {
    // Simula delay de API
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

    const lastUserMessage = messages.filter(m => m.role === 'user').pop();
    if (!lastUserMessage) {
      return {
        content: 'Ol√°! Como posso ajud√°-lo hoje?',
        usage: { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 }
      };
    }

    const userText = lastUserMessage.content.toLowerCase();
    
    // Respostas inteligentes baseadas no contexto
    const responses = [
      'Entendo sua pergunta. Vou analisar isso e fornecer uma solu√ß√£o adequada.',
      'Excelente pergunta! Baseado no contexto, posso sugerir algumas abordagens.',
      'Vou ajud√°-lo com isso. Deixe-me pensar na melhor estrat√©gia.',
      'Perfeito! Essa √© uma quest√£o importante que merece aten√ß√£o.',
      'Entendo o que voc√™ precisa. Vou elaborar uma resposta detalhada.',
      '√ìtima pergunta! Vou fornecer insights valiosos sobre esse t√≥pico.',
      'Vou analisar sua solicita√ß√£o e apresentar as melhores op√ß√µes.',
      'Interessante! Deixe-me compartilhar algumas ideias sobre isso.',
      'Entendo perfeitamente. Vou criar uma solu√ß√£o personalizada para voc√™.',
      'Excelente! Vou elaborar uma resposta completa e pr√°tica.'
    ];

    // Respostas espec√≠ficas baseadas em palavras-chave
    if (userText.includes('vtex')) {
      return {
        content: 'Como especialista em VTEX, posso ajud√°-lo com configura√ß√µes da plataforma, desenvolvimento de componentes, otimiza√ß√£o de performance e integra√ß√µes. O que especificamente voc√™ gostaria de saber sobre VTEX?',
        usage: { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 }
      };
    }

    if (userText.includes('marketing') || userText.includes('campanha')) {
      return {
        content: 'Para estrat√©gias de marketing e campanhas, recomendo focar em segmenta√ß√£o de p√∫blico, an√°lise de dados e otimiza√ß√£o de convers√£o. Que tipo de campanha voc√™ est√° planejando?',
        usage: { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 }
      };
    }

    if (userText.includes('vendas') || userText.includes('venda')) {
      return {
        content: 'Para otimizar vendas, sugiro trabalhar com prospec√ß√£o qualificada, follow-up sistem√°tico e an√°lise de funil de vendas. Qual etapa do processo de vendas voc√™ gostaria de melhorar?',
        usage: { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 }
      };
    }

    if (userText.includes('produto') || userText.includes('produtos')) {
      return {
        content: 'Para gest√£o de produtos, recomendo an√°lise de cat√°logo, otimiza√ß√£o de descri√ß√µes, estrat√©gias de pricing e recomenda√ß√µes personalizadas. Que aspecto da gest√£o de produtos voc√™ quer abordar?',
        usage: { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 }
      };
    }

    if (userText.includes('cliente') || userText.includes('atendimento')) {
      return {
        content: 'Para melhorar o atendimento ao cliente, sugiro implementar chatbots inteligentes, an√°lise de sentimentos e estrat√©gias de reten√ß√£o. Como posso ajud√°-lo a otimizar a experi√™ncia do cliente?',
        usage: { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 }
      };
    }

    // Resposta aleat√≥ria inteligente
    const randomResponse = responses[Math.floor(Math.random() * responses.length)];
    return {
      content: `${randomResponse}\n\n*Modo Demo: Esta √© uma resposta simulada. Para respostas reais do GPT, configure uma chave de API v√°lida.*`,
      usage: { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 }
    };
  }

  // M√©todo para criar mensagens do sistema baseadas no agente selecionado
  createSystemMessage(agentName: string): GPTMessage {
    const agentPrompts: Record<string, string> = {
      'ad': 'Voc√™ √© um assistente especializado em marketing digital e publicidade. Ajude com campanhas, segmenta√ß√£o de p√∫blico e otimiza√ß√£o de an√∫ncios.',
      'ai1': 'Voc√™ √© um assistente de IA geral, especializado em automa√ß√£o e intelig√™ncia artificial. Ajude com integra√ß√£o de sistemas e solu√ß√µes de IA.',
      'campaigns': 'Voc√™ √© um especialista em campanhas de marketing. Ajude com planejamento, execu√ß√£o e an√°lise de campanhas digitais.',
      'customerservice': 'Voc√™ √© um especialista em atendimento ao cliente. Ajude com estrat√©gias de suporte, chatbots e experi√™ncia do cliente.',
      'fullfilment': 'Voc√™ √© um especialista em fulfillment e log√≠stica. Ajude com otimiza√ß√£o de processos de entrega e gest√£o de estoque.',
      'handling': 'Voc√™ √© um especialista em gest√£o de processos. Ajude com automa√ß√£o de workflows e otimiza√ß√£o de opera√ß√µes.',
      'insights': 'Voc√™ √© um analista de dados especializado em insights de neg√≥cio. Ajude com an√°lise de dados e relat√≥rios estrat√©gicos.',
      'offers': 'Voc√™ √© um especialista em ofertas e promo√ß√µes. Ajude com estrat√©gias de pricing e campanhas promocionais.',
      'productrec': 'Voc√™ √© um especialista em recomenda√ß√£o de produtos. Ajude com algoritmos de recomenda√ß√£o e personaliza√ß√£o.',
      'salesassistant': 'Voc√™ √© um assistente de vendas. Ajude com estrat√©gias de vendas, prospec√ß√£o e fechamento de neg√≥cios.',
      'search': 'Voc√™ √© um especialista em busca e SEO. Ajude com otimiza√ß√£o de motores de busca e estrat√©gias de conte√∫do.',
      'thirdparty': 'Voc√™ √© um especialista em integra√ß√µes de terceiros. Ajude com APIs, webhooks e integra√ß√µes de sistemas.',
      'visualeditor': 'Voc√™ √© um especialista em design visual e edi√ß√£o. Ajude com cria√ß√£o de conte√∫do visual e design de interfaces.',
      'vtexhelp': 'Voc√™ √© um especialista em VTEX. Ajude com configura√ß√µes da plataforma, desenvolvimento e otimiza√ß√£o de e-commerce.',
      'projects': 'Voc√™ √© um gerente de projetos especializado em metodologias √°geis. Ajude com planejamento, execu√ß√£o e acompanhamento de projetos.',
    };

    const defaultPrompt = 'Voc√™ √© um assistente inteligente especializado em e-commerce e tecnologia. Ajude com perguntas e tarefas relacionadas ao seu dom√≠nio.';

    return {
      role: 'system',
      content: agentPrompts[agentName] || defaultPrompt,
    };
  }
}

export const gptService = new GPTService();
